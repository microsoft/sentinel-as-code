trigger: none

parameters:
  - name: UsePreRelease
    displayName: Use Powershell Pre-Release Artifacts
    type: boolean
    default: false

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self

- task: NuGetToolInstaller@1
  displayName: Setup Nuget Tools
  name: NugetToolSetup
  inputs:
    versionSpec: 
    checkLatest: true

- task: NuGetAuthenticate@0
  displayName: Authenticating with Sentinel Nuget
  name: NugetAuthentication
  inputs:
    nuGetServiceConnections: 'Microsoft Sentinel Nuget Framework Connection'

- task: PowerShell@2
  displayName: Resolving Feed Url
  name: FeedUriResolver
  inputs:
    targetType: 'inline'
    script: |
      $FeedManifest = $Env:VSS_NUGET_EXTERNAL_FEED_ENDPOINTS | ConvertFrom-Json
      Write-Host "##vso[task.setvariable variable=FEED_URL;issecret=false;]$($FeedManifest.endpointCredentials.endpoint)"
- task: PowerShell@2
  displayName: DevOps Artifact Feed
  name: ConnectArtifactFeed
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      nuget.exe sources add -Name NugetFramework -Source $(FEED_URL) -Username "PAT" -Password $(VSS_NUGET_ACCESSTOKEN) 
      $(Build.SourcesDirectory)/src/Build/Framework/Powershell.Nuget.Connect.ps1 -NuGetApiKey "$(VSS_NUGET_ACCESSTOKEN)" -Location $(FEED_URL) -Name NugetFramework
      try {
        $Credentials = $(Build.SourcesDirectory)/src/Build/Framework/Powershell.Nuget.Credentials.ps1 -NuGetApiKey "$(VSS_NUGET_ACCESSTOKEN)"
        $AllowPrerelease = [bool]::Parse("${{ parameters.UsePreRelease }}")
        Install-Module -Name "Azure.Kql.Powershell" -Repository "NugetFramework" -Scope CurrentUser -AllowPrerelease:$AllowPrerelease -Credential $Credentials
      }
      finally {
        $(Build.SourcesDirectory)/src/Build/Framework/Powershell.Nuget.Disconnect.ps1 -Name NugetFramework
      }

- task: PowerShell@2
  displayName: Download Azure ARM TTK
  name: DownloadPackageTTK
  inputs:
    targetType: 'inline'
    script: |
            Invoke-WebRequest -Uri https://aka.ms/arm-ttk-latest -UseBasicParsing -Method Get -OutFile $(System.ArtifactsDirectory)/azure-ttk.zip
            Expand-Archive -Path $(System.ArtifactsDirectory)/azure-ttk.zip -DestinationPath $(System.ArtifactsDirectory)/Azure-TTK
            Get-ChildItem -Path $(System.ArtifactsDirectory)/Azure-TTK -Include *.ps1,*.psd1,*.ps1xml,*.psm1 -Recurse | Unblock-File
    pwsh: true
    workingDirectory: '$(System.ArtifactsDirectory)'

- task: PowerShell@2
  displayName: Validate ARM Templates
  inputs:
    targetType: 'inline'
    script: |
            Import-Module $(System.ArtifactsDirectory)/Azure-TTK/arm-ttk/arm-ttk.psd1 -Force
            Get-ChildItem -Path $(System.DefaultWorkingDirectory)
            Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/Sentinel/mitre-use-cases/*/*/Playbooks/" -Recurse -Filter "*.json" -Exclude "*.parameters.json" | ForEach-Object {
              Write-Host "Analyzing $($_.FullName)"
              Test-AzTemplate $_.FullName
              Write-Host "Done!"
            }
    pwsh: true
    workingDirectory: '$(System.ArtifactsDirectory)'
- task: PowerShell@2
  displayName: Validate Powershell Runbooks and Modules
  inputs:
    targetType: 'inline'
    script: |
            Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force
            Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/Sentinel/mitre-use-cases/*/*/Runbooks/Unit-Tests" -Recurse -Include "*.test.ps1" | ForEach-Object {
              Write-Host "Analyzing $($_.FullName)"
              Invoke-ScriptAnalyzer -Path $_.FullName
              Write-Host "Done!"
            }
    pwsh: true
    workingDirectory: '$(System.ArtifactsDirectory)'
- task: PowerShell@2
  displayName: Validate Powershell Unit Testing
  inputs:
    targetType: 'inline'
    script: |
            Install-Module Pester -Force -Scope CurrentUser
            Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/Sentinel/mitre-use-cases/*/*/Runbooks/" -Recurse -Include "*.test.ps1" | ForEach-Object {
              Write-Host "Unit Test $($_.FullName)"
              Invoke-Pester $_.FullName -OutputFile $(System.DefaultWorkingDirectory)\Output\Tests\$($_.Name)_TestOutput.XML -OutputFormat NUnitXML
              Write-Host "Done!"
            }
    pwsh: true
    workingDirectory: '$(System.ArtifactsDirectory)'


- task: PowerShell@2
  displayName: Validate Rules
  inputs:
    targetType: 'inline'
    script: |
            Install-Module -Name powershell-yaml -Scope CurrentUser -Force
            Import-Module -Name Azure.Kql.Powershell
            Write-Host "Validating Yaml Rules"
            Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/Sentinel/mitre-use-cases/" -Recurse -Include "*.rule.yaml" | ForEach-Object {
              try {
                Write-Host "Analyzing $($_.FullName)"
                $Rule = Get-Content -Path $_.FullName -Raw | ConvertFrom-Yaml
                Write-Host "Validating Query: $($Rule.Query)"
                if(-not [string]::IsNullOrEmpty($Rule.Query)) {
                  Invoke-KqlValidator -KQLExpression $Rule.Query
                }
                Write-Host "Done!"
              }
              catch {
                Write-Error $_
              }
            }
            Write-Host "Validating Json Rules"
            Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/Sentinel/mitre-use-cases/" -Recurse -Include "*.rule.json" | ForEach-Object {
              try {
                Write-Host "Analyzing $($_.FullName)"
                $Rule = Get-Content -Path $_.FullName -Raw | ConvertFrom-Json
                Write-Host "Validating Query: $($Rule.Query)"
                if(-not [string]::IsNullOrEmpty($Rule.Query)) {
                  Invoke-KqlValidator -KQLExpression $Rule.Query
                }
                Write-Host "Done!"
              }
              catch {
                Write-Error $_
              }
            }
    pwsh: true
    workingDirectory: '$(System.ArtifactsDirectory)'

- task: PowerShell@2
  displayName: Extract Manifest
  inputs:
    targetType: 'inline'
    script: |
            Write-Host "Extracting MITRE Manifest"
            $OutputPath = Join-Path -Path $(Agent.TempDirectory) -ChildPath "OutputMitreManifest.csv"
            $(System.DefaultWorkingDirectory)/src/Build/Artifacts/Scripts/Azure.Mitre.Manifest.Generation.ps1 -Path "$(System.DefaultWorkingDirectory)/Sentinel/mitre-use-cases/" -OutputPath $OutputPath -ShowReport
    pwsh: true
    workingDirectory: '$(System.ArtifactsDirectory)'

- task: PublishBuildArtifacts@1
  displayName: Publish Manifest Resume
  inputs:
    PathtoPublish: '$(Agent.TempDirectory)/OutputMitreManifest.csv'
    ArtifactName: 'Mitre Manifest Report'
    publishLocation: 'Container'