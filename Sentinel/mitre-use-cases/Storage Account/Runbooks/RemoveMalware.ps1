[CmdletBinding()]
param (
	[Parameter()]
	[string]
	$StorageAccountResourceId,
	[Parameter()]
	[string]
	$fileUrl
)

#$StorageAccountResourceountResourceId = "/subscriptions/bb520028-63ff-4385-a056-72f07d62c384/resourceGroups/rg00002/providers/Microsoft.Storage/storageAccounts/abcnest099"
$StorageAccountResourceountResourceId = $entity.ResourceID
#$fileUrl = "https://abcnest099.blob.core.windows.net/blob001/New Text Document.txt"
$fileUrl=  $entity.fileurl
        
$ServicePrincipalConection = Get-AutomationConnection -Name "AzureRunAsConnection"
$ServicePrincipalConection
 
try{
	Write-Output	"connecting  using $($ServicePrincipalConection.ApplicationId)"
	Connect-AzAccount `
							-ServicePrincipal `
							-Tenant $ServicePrincipalConection.TenantId `
							-ApplicationId $ServicePrincipalConection.ApplicationId `
							-CertificateThumbprint $ServicePrincipalConection.CertificateThumbprint
	Write-Output	"connected with $($ServicePrincipalConection.ApplicationId)"
}
catch{
	Write-Error $_.Exception.Message
	exit
}
$AzContext = Get-AzContext

#Creating Role Assignment for having access to Remove the Blob
$ServicePrincipalCredential = Get-AutomationPSCredential -Name 'ServicePrincipal'

try {
	Write-Output "Assigning role to $($ServicePrincipalCredential.username) on $($StorageAccountResourceId)"
	$RoleAssignment = Get-AzADServicePrincipal -ApplicationId $ServicePrincipalCredential.username | New-AzRoleAssignment -RoleDefinitionName 'Storage Blob Data Contributor' -Scope $StorageAccountResourceId          
	Write-Output $RoleAssignment
	Write-Output "Role Assigned $($ServicePrincipalCredential.username) on $($StorageAccountResourceId) waiting for permission replication"
	$ResourceGroupName = $StorageAccountResourceId.Split("/")[4]
	$StorageAccountName = $StorageAccountResourceId.Split("/")[-1]
	$containerName = $fileUrl.Split("/")[-2]
	$filename = $fileUrl.Split("/")[-1]
	$StorageAccountResource = Get-AzStorageAccount -ResourceGroupName $ResourceGroupName -Name $StorageAccountName  
	$StorageAccountContext = $StorageAccountResource.Context  
	Start-Sleep -Seconds 60
}
catch {
	Write-Error $_.Exception.Message
	exit
}

Write-Output "loging in wih SP  $($ServicePrincipalCredential.username)"
#connect to Azure using SP
try {
	$tenant = $AzContext.Tenant 
	Write-Output "Disconecting master account"
	Disconnect-AzAccount
	Start-Sleep -Seconds 10
	Write-Output "connecting with SP"
	Connect-AzAccount -Credential $ServicePrincipalCredential -Tenant $tenant  -ServicePrincipal
	Get-AzContext
}
catch {		
	Write-Error $_.Exception.Message
}


#delete malware file from Blob container
Write-Output "deleting blob"
try {
	Remove-AzStorageBlob -Container $containerName -Context $StorageAccountContext -Blob $filename 
}
catch {
	Write-Error $_.Exception.Message
	exit
}

#remove role assignment
try {
	Write-Output "Removing role to $($ServicePrincipalCredential.username) on $($StorageAccountResourceId)"
	Connect-AzAccount `
					-ServicePrincipal `
					-Tenant $ServicePrincipalConection.TenantId `
					-ApplicationId $ServicePrincipalConection.ApplicationId `
					-CertificateThumbprint $ServicePrincipalConection.CertificateThumbprint
	Get-AzADServicePrincipal -ApplicationId $ServicePrincipalCredential.username | Remove-AzRoleAssignment -Scope $StorageAccountResourceId -RoleDefinitionName 'Storage Blob Data Contributor'
}
catch {
	Write-Error $_.Exception.Message
	exit
}